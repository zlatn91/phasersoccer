// -- user code here --
/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * Level.
 */
function Level() {

	Phaser.State.call(this);

}

/** @type Phaser.State */
var Level_proto = Object.create(Phaser.State.prototype);
Level.prototype = Level_proto;
Level.prototype.constructor = Level;

Level.prototype.init = function () {

	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	this.stage.backgroundColor = '#ffffff';

};

Level.prototype.preload = function () {

	this.load.pack('img', 'assets/pack.json');
//	this.load.image('field', 'assets/img/field.jpg');
//	this.load.image('korea2', 'assets/img/korea2.png');
//	this.load.image('korea', 'assets/img/korea.png');
//	this.load.image('arrow', 'assets/img/arrow.png');
//	this.load.image('ball', 'assets/img/ball.png');
//	this.load.image('goalPost1', 'assets/img/goalPost1.png');
//	this.load.image('goalPost2', 'assets/img/goalPost2.png');
//	this.load.image('field', 'assets/img/field.png');

};

Level.prototype.create = function () {
	var _field = this.add.sprite(480.0, 270.0, 'field');
	_field.anchor.setTo(0.5, 0.5);

	var _awayTeam = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_awayTeam.position.setTo(-264.0, -36.0);
	_awayTeam.inputEnableChildren = true;
	var _korea1_5 = this.add.sprite(852.0, 432.0, 'korea2', null, _awayTeam);
	_korea1_5.anchor.setTo(0.5, 0.5);

	var _korea1_4 = this.add.sprite(1116.0, 410.0, 'korea2', null, _awayTeam);
	_korea1_4.anchor.setTo(0.5, 0.5);

	var _korea1_3 = this.add.sprite(1116.0, 192.0, 'korea2', null, _awayTeam);
	_korea1_3.anchor.setTo(0.5, 0.5);

	var _korea1_2 = this.add.sprite(1068.0, 312.0, 'korea2', null, _awayTeam);
	_korea1_2.anchor.setTo(0.5, 0.5);

	var _korea1_1 = this.add.sprite(888.0, 312.0, 'korea2', null, _awayTeam);
	_korea1_1.anchor.setTo(0.5, 0.5);

	var _homeTeam = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_homeTeam.position.setTo(-258.0, -200.0);
	_homeTeam.inputEnableChildren = true;
	var _korea_5 = this.add.sprite(588.0, 324.0, 'korea', null, _homeTeam);
	_korea_5.anchor.setTo(0.5, 0.5);

	var _korea_4 = this.add.sprite(576.0, 624.0, 'korea', null, _homeTeam);
	_korea_4.anchor.setTo(0.5, 0.5);

	var _korea_3 = this.add.sprite(372.0, 300.0, 'korea', null, _homeTeam);
	_korea_3.anchor.setTo(0.5, 0.5);

	var _korea_2 = this.add.sprite(348.0, 636.0, 'korea', null, _homeTeam);
	_korea_2.anchor.setTo(0.5, 0.5);

	var _korea_1 = this.add.sprite(492.0, 324.0, 'korea', null, _homeTeam);
	_korea_1.anchor.setTo(0.5, 0.5);

	var _goal = this.add.physicsGroup(Phaser.Physics.ARCADE);

	var _goalPost = this.add.sprite(-87.0, 208.0, 'goalPost1', null, _goal);
	_goalPost.body.setSize(40.0, 60.0, 60.0, 30.0);
	_goalPost.body.moves = false;

	var _goalPost1 = this.add.sprite(949.0, 211.0, 'goalPost2', null, _goal);
	_goalPost1.body.setSize(40.0, 64.63397216796875, 0.0, 30.0);
	_goalPost1.body.moves = false;

	var _ball = this.add.sprite(480.0, 276.0, 'ball');
	_ball.anchor.setTo(0.5, 0.5);
	this.game.physics.arcade.enable(_ball);
	_ball.body.collideWorldBounds = true;
	_ball.body.bounce.x = 0.9;
	_ball.body.bounce.y = 0.9;
	_ball.body.maxVelocity.x = 800.0;
	_ball.body.maxVelocity.y = 800.0;
	_ball.body.drag.x = 200.0;
	_ball.body.drag.y = 200.0;
	_ball.body.friction.y = 1.0;
	_ball.body.maxAngular = 800.0;

	_awayTeam.setAll("body.collideWorldBounds", true);
	_awayTeam.setAll("body.bounce.x", 0.5);
	_awayTeam.setAll("body.bounce.y", 0.5);
	_awayTeam.setAll("body.drag.x", 200);
	_awayTeam.setAll("body.drag.y", 200);
	_awayTeam.setAll("body.maxVelocity.x", 600);
	_awayTeam.setAll("body.maxVelocity.y", 600);
	_homeTeam.setAll("body.collideWorldBounds", true);
	_homeTeam.setAll("body.bounce.x", 0.5);
	_homeTeam.setAll("body.bounce.y", 0.5);
	_homeTeam.setAll("body.drag.x", 200);
	_homeTeam.setAll("body.drag.y", 100);
	_homeTeam.setAll("body.maxVelocity.x", 600);
	_homeTeam.setAll("body.maxVelocity.y", 600);


	// fields

	this.fField = _field;
	this.fAwayTeam = _awayTeam;
	this.fKorea1_5 = _korea1_5;
	this.fKorea1_4 = _korea1_4;
	this.fKorea1_3 = _korea1_3;
	this.fKorea1_2 = _korea1_2;
	this.fKorea1_1 = _korea1_1;
	this.fHomeTeam = _homeTeam;
	this.fKorea_5 = _korea_5;
	this.fKorea_4 = _korea_4;
	this.fKorea_3 = _korea_3;
	this.fKorea_2 = _korea_2;
	this.fKorea_1 = _korea_1;
	this.fGoalPost = _goalPost;
	this.fGoalPost1 = _goalPost1;
	this.fBall = _ball;
		this.fBall.body.onWorldBounds = new Phaser.Signal();
		this.fBall.body.onWorldBounds.add(setBounce, this);
		this.fBall.body.onCollide = new Phaser.Signal();

		graphics2 = this.game.add.graphics(0, 0);
		graphics2.lineStyle(4, 0xffd900, 1);
		graphics3 = this.game.add.graphics(0, 0);
		graphics3.lineStyle(4, 0xA6EC8, 1);
		timer = this.game.time.create(true);
		timer.repeat(2000, 1 ,turnTimer, this, turn=1);
		timer.start();


		this.fHomeTeam.onChildInputDown.add(set, this);
		this.fHomeTeam.onChildInputDown.add(setArrow, this);
		this.fHomeTeam.onChildInputUp.add(shoot, this);

		this.fAwayTeam.onChildInputDown.add(set, this);
		this.fAwayTeam.onChildInputDown.add(setArrow, this);
		this.fAwayTeam.onChildInputUp.add(shoot, this);

		test(this.fHomeTeam.checkAll("body.velocity.x", 0));
		check(this);

};

/* --- end generated code --- */
// -- user code here --
var fBall;
var timer;
var arrow;
var graphics2;
var graphics3;
var mouseX;
var mouseY;

var homeTeamScore = 0;
var awayTeamScore = 0;

var team;

var kX;
var kY;
var bX;
var bY;
var length;


function score() {
	this.game.camera.shake(0.005, 2000);
	this.fBall.kill();
	if (team == "home") {
		homeTeamScore += 1;
	} else {
		awayTeamScore += 1;
	}
	timer.add(5000, restart, this);
}
Level.prototype.update = function() {
	color1 = [ 0, 255, 0 ];
	color2 = [ 255, 0, 0 ];
	bX = this.fBall.body.center.x;
	bY = this.fBall.body.center.y;
	mouseX = this.game.input.activePointer.x;
	mouseY = this.game.input.activePointer.y;
	if (arrow !== undefined) {
		arrow.rotation = this.game.physics.arcade.angleToPointer(arrow);
		length = Math.pow((mouseX - arrow.x), 2)
				+ Math.pow((mouseY - arrow.y), 2);
		length = Math.sqrt(length);
		length = parseInt(length * 1.5);
		if (length > 0 && length < 255) {
			arrow.scale.set(0 + length / 130, 0 + length / 130);
			var color = Phaser.Color.RGBtoString(color1[0] += length, color1[1] += -length, color1[2], '', '');
			arrow.tint = color;
		} else if (length > 300) {
			this.game.camera.shake(0.003, 100);
		}
	}
	this.game.physics.arcade.overlap(this.fBall, this.fGoalPost, score, null,
			this, team = "away");
	this.game.physics.arcade.overlap(this.fBall, this.fGoalPost1, score, null,
			this, team = "home");
	this.game.physics.arcade.collide(this.fBall, this.fHomeTeam, banana, null,
			this);
	this.game.physics.arcade.collide(this.fBall, this.fAwayTeam, banana, null,
			this);
	this.game.physics.arcade.collide(this.fHomeTeam);
	this.game.physics.arcade.collide(this.fAwayTeam);
	this.game.physics.arcade.collide(this.fHomeTeam, this.fAwayTeam);
	if (parseInt(this.fBall.body.speed) !== 0) {
		if (parseInt(this.fBall.body.speed) <= 150) {
			this.fBall.body.acceleration.x = 0;
			this.fBall.body.acceleration.y = 0;
		}
	}
	for(var i=0; i<5; i++){
		if(this.fHomeTeam.children[i].body.center.x >= 0 && this.fHomeTeam.children[i].body.center.x <= 40){
			if(this.fHomeTeam.children[i].body.center.y >= 220 && this.fHomeTeam.children[i].body.center.y <= 320){
				this.fHomeTeam.children[i].body.velocity.set(200, -200);
				test("키퍼금지");
			}

		}
		if(this.fAwayTeam.children[i].body.center.x >= 920 && this.fAwayTeam.children[i].body.center.x <= 960){
			if(this.fAwayTeam.children[i].body.center.y >= 220 && this.fAwayTeam.children[i].body.center.y <= 320){
				test("키퍼금지");
				this.fAwayTeam.children[i].body.velocity.set(-200, 200);
			}
		}
	}
	if (bX >= 0 && bX <= 40) {
		if (bY >= 0 && bY <= 50) {
			console.log("왼쪽상단구석");
			this.fBall.body.velocity.set(ran(200, 300), ran(200, 400));
		} else if (bY >= 490 && bY <= 540) {
			this.fBall.moves = false;
			console.log("왼쪽하단구석");
			this.fBall.body.velocity.set(ran(200, 300), ran(-400, -200));
		}
	}
	if (bX >= 920 && bX <= 960) {

		if (bY >= 0 && bY <= 50) {
			console.log("오른쪽상단구석");
			this.fBall.body.velocity.set(ran(-400, -200), ran(200, 400));
		} else if (bY >= 490 && bY <= 540) {
			console.log("오른쪽하단구석");
			this.fBall.body.velocity.set(ran(-300, -200), ran(-400, -200));
		}
	}
};

Level.prototype.render = function() {
	this.game.debug.text("test timer " + parseInt(timer.duration / 1000), 400,
			32, 'red');
	this.game.debug.text("HomeTeam Score: " + homeTeamScore, 100, 100, 'red');
	this.game.debug.text("AwayTeam Score: " + awayTeamScore, 300, 100, 'red');
};
function banana(fBall, kicker, Level) {
	fBall.body.acceleration.x = 0;
	fBall.body.acceleration.y = 0;
	if (kicker.body.speed > 450) {
		if (kY > bY) {
			kicker.body.angularVelocity += 1000;
			kicker.body.angularDrag = 200;
			fBall.body.angularVelocity -= 1000;
			fBall.body.angularDrag = 200;
			for (var i = 0; i < 10; ++i) {
				fBall.body.velocity.y += -10;
				fBall.body.acceleration.y += -35;
			}
		}
		if (bY > kY) {
			kicker.body.angularVelocity -= 1000;
			kicker.body.angularDrag = 200;
			fBall.body.angularVelocity += 1000;
			fBall.body.angularDrag = 200;
			for (var i = 0; i < 10; ++i) {
				console.log("here");
				fBall.body.velocity.y += 10;
				fBall.body.acceleration.y += 35;
			}
		}
		if (kX > bX) {
			kicker.body.angularVelocity = -1000;
			kicker.body.angularDrag = 200;
			fBall.body.angularVelocity = 1000;
			for (var i = 0; i < 10; ++i) {
				fBall.body.velocity.x += -10;
				fBall.body.acceleration.x += -50;
			}
		}
		if (bX > kX) {
			kicker.body.angularVelocity = 1000;
			kicker.body.angularDrag = 200;
			fBall.body.angularVelocity = -1000;
			for (var i = 0; i < 10; ++i) {
				fBall.body.velocity.x += 10;
				fBall.body.acceleration.x += 10;
			}
		}
	}
	if (kicker.body.speed > 200 && kicker.body.speed < 400) {
		if (kY > bY) {
			kicker.body.angularVelocity = 200;
			kicker.body.angularDrag = 50;
			fBall.body.angularVelocity = -200;
			fBall.body.angularDrag = 50;
			for (var i = 0; i < 10; ++i) {
				fBall.body.acceleration.y -= 2;
			}
		}
		if (bY > kY) {
			kicker.body.angularVelocity = -200;
			kicker.body.angularDrag = 50;
			fBall.body.angularVelocity = 200;
			fBall.body.angularDrag = 50;
			for (var i = 0; i < 10; ++i) {
				fBall.body.acceleration.y += 2;
			}
		}
		if (kX > bX) {
			kicker.body.angularVelocity = -200;
			kicker.body.angularDrag = 50;
			fBall.body.angularVelocity += 200;
			fBall.body.angularDrag = 50;
			for (var i = 0; i < 10; ++i) {
				fBall.body.acceleration.x -= 2;
			}
		}
		if (kX > bX) {
			kicker.body.angularVelocity += 200;
			kicker.body.angularDrag = 50;
			fBall.body.angularVelocity -= 200;
			fBall.body.angularDrag = 50;
			for (var i = 0; i < 10; ++i) {
				fBall.body.acceleration.x -= 2;
				console.log(i);
			}
		}
	}
}
var bounce = 0.8;
function setBounce(fBall, kicker) {
//	if (bounce <= 0.8) {
//		bounce += -0.1;
//		fBall.body.bounce.set(bounce, bounce);
//	}
}
function setX(player) {
	centerX = player.body.center.x;
	return centerX;
}
function setY(player) {
	centerY = player.body.center.y;
	return centerY;
}
function restart() {
	timer.add(5000, turnTimer, this);
	this.game.state.start('Level', true, true);
}
function setArrow(kicker) {
	this.kicker = kicker;
	kX = kicker.body.center.x;
	kY = kicker.body.center.y;
	arrow = this.add.sprite(kX, kY, 'arrow');
	arrow.anchor.setTo(0, 0.5);
}
function set(kicker) {
	timer.stop(false);
	this.kicker = kicker;
	kicker.body.moves = false;
	kicker.body.velocity.setTo(0, 0);
}
var turn;
function shoot(kicker, Level) {
	timer.start();
	kicker.body.moves = true;
	kicker.body.velocity.setTo((arrow.x - mouseX) * 3, (arrow.y - mouseY) * 3);
	length = 0;
	if(include(this.fHomeTeam.children, kicker)){
		graphics2.destroy();
	}else{
		graphics3.destroy();
	}
	arrow.destroy();
	arrow = undefined;
}
var j;
function check(Level){
	let flag = false;
	j = 0;
	if(Level.fBall.body.velocity.x == 0){
		for(var i=0; i<5; i++){
			if(Level.fHomeTeam.children[i].body.velocity.x === 0 && Level.fAwayTeam.children[i].body.velocity.x === 0 ){
				j+=1;
			}
		}
	}
}

function turnTimer() {
	test("turn: " + turn);
	timer.repeat(3000, 1, turnTimer, this);
	check(this);
	if(j===5){
		if (turn % 2 == 1) {
			this.fHomeTeam.onChildInputDown.active = true;
			this.fHomeTeam.onChildInputUp.active = true;
			this.fAwayTeam.onChildInputDown.active = false;
			this.fAwayTeam.onChildInputUp.active = false;
			graphics3.destroy();
			graphics2 = this.game.add.graphics(0, 0);
			graphics2.lineStyle(4, 0xffd900, 1);
			graphics2.drawCircle(setX(this.fKorea_1), setY(this.fKorea_1), 32);
			graphics2.drawCircle(setX(this.fKorea_2), setY(this.fKorea_2), 32);
			graphics2.drawCircle(setX(this.fKorea_3), setY(this.fKorea_3), 32);
			graphics2.drawCircle(setX(this.fKorea_4), setY(this.fKorea_4), 32);
			graphics2.drawCircle(setX(this.fKorea_5), setY(this.fKorea_5), 32);
		} else {
			this.fAwayTeam.onChildInputDown.active = true;
			this.fAwayTeam.onChildInputUp.active = true;
			this.fHomeTeam.onChildInputDown.active = false;
			this.fHomeTeam.onChildInputUp.active = false;
			graphics2.destroy();
			graphics3 = this.game.add.graphics(0, 0);
			graphics3.lineStyle(4, 0xA6EC8, 1);
			graphics3.drawCircle(setX(this.fKorea1_1), setY(this.fKorea1_1), 32);
			graphics3.drawCircle(setX(this.fKorea1_2), setY(this.fKorea1_2), 32);
			graphics3.drawCircle(setX(this.fKorea1_3), setY(this.fKorea1_3), 32);
			graphics3.drawCircle(setX(this.fKorea1_4), setY(this.fKorea1_4), 32);
			graphics3.drawCircle(setX(this.fKorea1_5), setY(this.fKorea1_5), 32);
		}
		turn+=1;
	}
}

function include (array, obj){
	for(var i=0; i<array.length; i++){
		if(array[i] == obj) return true;
	}
}
function test(article) {
	console.log("#### test: " + article);
}
function ran(min, max) {
	let ran2 = Phaser.Math.between(min, max);
	return ran2;
}
